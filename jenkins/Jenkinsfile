pipeline {
    agent any
    environment {
        MAVEN_HOME = tool name: 'Maven 3.9.0', type: 'maven'
        // Define remote server details
        REMOTE_SERVER = '3.111.245.213'
        REMOTE_USER = 'ubuntu'
        REMOTE_DIR = '/opt/tomcat/webapps'
    }    
    stages {
        stage('Git-Checkout') {
            steps {
                // Git checkout step
                git credentialsId: 'tomcatcred', url: 'https://github.com/dkadmin/maven-build-dk.git'
                echo "Checkout successful"
            }
        }
        stage('Compile') {
            steps {
                // Maven compile step
                sh 'mvn compile'
                echo "Compile successful"
            }
        }
        stage('Build') {
            steps {
                // Maven clean and package steps
                sh 'mvn clean'
                sh 'mvn package'
                echo "Build successful"
            }
        }
        stage('Test') {
            steps {
                 // Maven test step
                sh 'mvn test'
                echo "Test successful"
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
//        stage('Deliver') {
//            steps {
               // sh './jenkins/scripts/deliver.sh'
//            }   
//        }
//                stage('Deploy') {
//            steps {
//                // Tomcat deployment step
 //               deploy adapters: [tomcat9(credentialsId: 'tomcatcred', path: '/var/lib/jenkins/workspace/tomcat-deployment/target/my-app-1.0-SNAPSHOT.jar', url: 'http://3.111.245.213:8080/')], 
 //                      contextPath: 'simpliearnarfact', 
 //                      onFailure: false, 
 //                      war: '**/*.jar'
 //               echo "Deploy successful"
 //           }
//        }
        stage('Deploy') {
            steps {
                // Transfer JAR/WAR file to remote server using SCP
                script {
                    def artifact = findFiles(glob: 'target/*.jar').collect { it.path }.first()
                    def remoteFilePath = "{REMOTE_DIR}/$(basename ${artifact})"
                    
                    sshagent(['tomcatcred']) {
                        sh "scp ${artifact} ${REMOTE_USER}@${REMOTE_SERVER}:${remoteFilePath}"
                    }
                }
                // Optionally, execute commands on remote server after deployment
                sshagent(['tomcatcred']) {
                    sh "ssh ${REMOTE_USER}@${REMOTE_SERVER} 'sudo systemctl restart your-app.service'"
                }
            }
    }
}
